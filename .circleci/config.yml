# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define commands to run before and after the build process.
commands:
  destroy_environments:
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

  # special_delete:
  #   steps:
  #     - run:
  #         name: Deleting
  #         when: on_fail
  #         command: |
  #           aws cloudformation delete-stack --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:

  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Create Cloudformation Stack"
          command: "aws cloudformation deploy --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} --template-file template.yml --region us-east-1"

# Exercise: Configure and Deployment
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5d:fc:83:2b:54:1d:60:1c:57:36:26:f1:f3:57:6d:9c"]
      - run:
          # name: "Configure Cloudformation Stack"
          # command: "aws cloudformation update --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} --template-file template.yml --region us-east-1"
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: "Configure Cloudformation Stack - configure server"
          command: |
            ansible-playbook -i inventory.yml main.yml

  smoke-test:
    docker:
      # - image: alpine:latest
      - image: amazon/aws-cli
    steps:
      - run:
          name: simulate error
          command: echo 'Trying to fail the job'
      - run: return 1
      - destroy_environments

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - create  a cloudformation stack
          command: |
            aws cloudformation deploy \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --template-file bucket.yml \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" \
            --region us-east-1
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
      # - special_delete

# Fetch and save the pipeline ID responsible for the deployment.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID responsible for the deployment.
          command: |
            aws cloudformation list-exports \
            --query "Exports[?Name==PipelineID].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          name: Persist the old pipeline ID responsible for the deployment.
          root: ~/
          paths:
            - textfile.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --stack-name production-distro \
            --template-file cloudfront.yml \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" \
            --region us-east-1


  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          name: Attach the old pipeline ID responsible for the deployment.
          at: ~/
      - run:
          name: Destroy the previous s3 bucket and CloudFormation stack
          command: |
            export OldBucketID=$(cat ~/textfile.txt) 
            aws s3 rm "s3://${OldBucketID:0:7}" --recursive

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  my-workflow:
    jobs:
      # - create-infrastructure
      # - configure_infrastructure
      # - create-infrastructure
      # - smoke-test

      # testing when create-infrastructure job works then when smoke-test job fails
      # does the destroy-environments job get run?
      # - create-infrastructure
      # - smoke-test:
      #     requires:
      #       - create-infrastructure
      - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production

